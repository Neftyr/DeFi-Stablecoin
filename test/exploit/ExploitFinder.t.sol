// SPDX-License-Identifier: MIT

pragma solidity ^0.8.19;

import {Test, console} from "forge-std/Test.sol";
import {Vm} from "forge-std/Vm.sol";
import {StdCheats} from "forge-std/StdCheats.sol";

contract ExploitFinder is StdCheats, Test {
    address private constant TARGET = 0x5Cbd7Feb522f3060985Ddb07929eB7ee12568a48;
    address private constant HUNTED = 0xe5760847db2f10A74Fc575B4803df5fe129811C1;

    // We need to find number, which will be uint128 type
    function testFindNumber(uint256 randomNumber) external {
        vm.startPrank(HUNTED);
        (bool success, bytes memory numberrBytes) = TARGET.call(abi.encodeWithSignature("hellFunc(uint128)", uint128(randomNumber)));

        uint128 numberr = abi.decode(numberrBytes, (uint128));
        uint256 targetNum = 115792089237316195423570985008687907853269984665640564039457584007913129639935;

        if (success && numberr > targetNum) {
            console.log("Selector Found!: ", randomNumber);
        }
        vm.stopPrank();
    }
}

// 65655913 // 63
